import {
  Markup,
  Scenes,
} from 'telegraf';

import type { ContextRequest } from '../../types/context';

import { SceneNames } from '../../constants/scenes';
import { isChatMemberSubscribe } from '../../api/chat';

const getLangSelectionKeyboard = (ctx) => Markup.inlineKeyboard([[
  Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscribe:check'),
]]);

export const scene = new Scenes.BaseScene<ContextRequest>(SceneNames.SUBSCRIBE_SCENE)
  .enter(async (ctx) => {
    const {
      isNew
    } = ctx.scene.state as { isNew: boolean };

    let text;

    if (isNew) {
      text = `–û—Ç–ª–∏—á–Ω–æ!\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ${process.env.CHAT_INVITE_LINK}.`;
    } else {
      text = `üôÅ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. ${process.env.CHAT_INVITE_LINK}`;
    }

    await ctx.reply(
      text,
      getLangSelectionKeyboard(ctx),
    );
  })
  .action('subscribe:check', async (ctx) => {
    let isSubscribe = false;

    try {
      isSubscribe = await isChatMemberSubscribe(ctx);
    } catch (e) {
      console.log(e);
    }

    if (!isSubscribe) {
      return await ctx.reply('üôÇ –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.');
    }

    await ctx.deleteMessage();
    await ctx.reply('üôè –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º')
  });
